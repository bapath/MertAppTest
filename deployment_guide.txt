# MERN Stack Application Deployment Guide for Azure

This document outlines the step-by-step process for deploying the MERN (MongoDB, Express.js, React, Node.js) stack application to Azure App Service.

## Essential Files and Folders

### Backend (Server)
- `server/index.js` - Main entry point for the Express server
- `server/models/` - Contains Mongoose schema definitions
- `server/controllers/` - API business logic
- `server/routes/` - API route definitions
- `server/config.js` - Configuration settings
- `server/package.json` - Backend dependencies and scripts

### Frontend (Client)
- `client/src/` - React source code
- `client/public/` - Static assets
- `client/package.json` - Frontend dependencies and scripts
- `client/build/` - Production build (will be generated)

## Pre-Deployment Preparation

1. **Build the React Frontend**
   ```
   cd client
   npm run build
   ```
   This creates a production-ready build in the `client/build` directory.

2. **Prepare for Deployment**
   Create a `server.js` file in the root directory to serve both the backend API and frontend:

   ```javascript
   const express = require('express');
   const path = require('path');
   const app = express();

   // Import your backend app
   const api = require('./server/index');

   // Serve API routes under /api
   app.use('/api', api);

   // Serve static files from the React build
   app.use(express.static(path.join(__dirname, 'client/build')));

   // Handle React routing, return all requests to React app
   app.get('*', (req, res) => {
     res.sendFile(path.join(__dirname, 'client/build', 'index.html'));
   });

   const PORT = process.env.PORT || 5000;
   app.listen(PORT, () => {
     console.log(`Server running on port ${PORT}`);
   });
   ```

3. **Create a Root package.json**   ```json
   {
     "name": "mern-task-app",
     "version": "1.0.0",
     "description": "MERN Stack Task Manager",
     "main": "server.js",
     "scripts": {
       "start": "node server.js",
       "build": "cd client && npm install && npm run build && cd ../server && npm install"
     },
     "engines": {
       "node": "18.x"
     },
     "dependencies": {
       "express": "^4.18.2"
     }
   }
   ```

## Azure Deployment Process

### 1. Create MongoDB Atlas Database

1. **Create a MongoDB Atlas Cluster**
   - Sign up or log in to [MongoDB Atlas](https://www.mongodb.com/cloud/atlas)
   - Create a new project (if needed)
   - Click "Build a Database" and select your preferred options
   - Choose the "FREE" tier for development/testing or select a paid tier for production
   - Select your preferred cloud provider (AWS, Azure, or GCP) and region
   - Create cluster (this may take a few minutes)

2. **Configure Database Access**
   - In the left navigation, go to "Database Access" under Security
   - Click "Add New Database User"
   - Create a username and password (or use the autogenerate secure password option)
   - Set appropriate database permissions (typically "Atlas admin" for simplicity)
   - Click "Add User"

3. **Configure Network Access**
   - In the left navigation, go to "Network Access" under Security
   - Click "Add IP Address"
   - For development, you can add your current IP address
   - For production with Azure App Service, you'll need to whitelist Azure IP ranges or use the "Allow access from anywhere" option (less secure)
   - Click "Confirm"

4. **Get Connection String**
   - Once your cluster is deployed, click "Connect"
   - Select "Connect your application"
   - Copy the connection string
   - Replace `<password>` with your database user's password and `<dbname>` with your database name (e.g., "mern_tasks")
   - Note: Keep this connection string secure, you'll need it later

### 2. Deploying the Backend to Azure App Service

1. **Create an App Service**
   - Go to Azure Portal
   - Create a new App Service resource
   - Select your subscription and resource group
   - Configure name, runtime stack (Node.js), and operating system
   - Select your desired plan
   - Click Review + Create, then Create

2. **Configure App Service Settings**
   - After creation, go to the App Service resource
   - Go to Configuration → Application settings
   - Add the following settings:
     - `MONGODB_URI`: Your MongoDB connection string from previous step
     - `PORT`: 8080 (default port for App Service)
     - `NODE_ENV`: production

3. **Deploy Your Code**
   - Option 1: Using Visual Studio Code with Azure Extension
     - Install Azure App Service extension for VS Code
     - Sign in to your Azure account
     - Right-click your App Service and select "Deploy to Web App"
     - Select your project folder
     - Confirm deployment   - Option 2: Using GitHub Actions (Recommended)
     - Push your code to a GitHub repository
     - In the Azure Portal, go to your App Service
     - Select Deployment Center → GitHub
     - Follow the prompts to configure GitHub Actions
     - Alternatively, create a custom GitHub Actions workflow (see detailed instructions below)

   - Option 3: Using Azure CLI
     ```
     az webapp up --name <app-name> --resource-group <resource-group> --runtime "NODE|14-lts"
     ```

4. **Verify Deployment**
   - Navigate to your App Service URL (https://<app-name>.azurewebsites.net)
   - Verify that the application is running correctly

### 3. Configure CORS (if deploying frontend separately)

If you're deploying the frontend and backend to separate services:

1. Go to your backend App Service
2. Update the CORS configuration in your Express app to allow requests from your frontend URL
3. Under the App Service settings, go to CORS and add your frontend URL

## Environment Variables Setup

Ensure these environment variables are correctly set in your Azure App Service:

- `MONGODB_URI`: Your MongoDB Atlas connection string (format: `mongodb+srv://username:password@cluster.mongodb.net/dbname?retryWrites=true&w=majority`)
- `PORT`: 8080 (Azure default)
- `NODE_ENV`: production
- `CLIENT_URL`: URL of your frontend (if separate)

## Troubleshooting

1. **Application Crashes**
   - Check the App Service logs: App Service → Log stream
   - Check the Application Insights if enabled

2. **Database Connection Issues**
   - Verify the MongoDB Atlas connection string is correct (including password)
   - Ensure your App Service IP is allowlisted in MongoDB Atlas Network Access settings
   - Check if your MongoDB Atlas cluster is running

3. **404 Errors**
   - Ensure the routes are properly defined in your Express app
   - Check if the React app is being served correctly

4. **CORS Issues**
   - If your frontend and backend are on different domains, ensure CORS is properly configured
   - Check browser console for CORS errors

## Optimizations

1. **Enable Application Insights**
   - In the Azure Portal, add Application Insights to your App Service
   - This provides detailed monitoring and diagnostics

2. **Configure Auto-Scaling**
   - Go to Scale out in your App Service settings
   - Configure rules for automatically scaling based on metrics

3. **Enable Azure CDN for Static Assets**
   - Create an Azure CDN profile
   - Add a new endpoint pointing to your App Service

## Regular Maintenance

1. **Update Dependencies**
   - Regularly check for and apply updates to npm packages

2. **Monitor Performance**
   - Review Application Insights data for performance bottlenecks

3. **Backup Your MongoDB Atlas Data**
   - Configure regular backups of your MongoDB Atlas database using the built-in backup options
   - For paid clusters, enable continuous backup and point-in-time recovery
   - For free clusters, consider implementing application-level backups

## GitHub Repository and GitHub Actions Deployment

### 1. Setting Up a GitHub Repository

1. **Create a GitHub Repository**
   - Sign in to your GitHub account
   - Click the "+" icon in the top-right corner and select "New repository"
   - Enter a repository name (e.g., "mern-task-app")
   - Choose whether the repository should be public or private
   - Optionally, initialize with a README, .gitignore (Node), and license
   - Click "Create repository"

2. **Initialize Git in Your Local Project**
   ```bash
   cd "c:\Users\BAPATH\Work\MERN test app"
   git init
   ```

3. **Create a .gitignore File**
   Create a `.gitignore` file in the root directory with the following content:
   ```
   # Dependencies
   node_modules/
   client/node_modules/
   server/node_modules/
   
   # Environment variables
   .env
   
   # Build files
   # Uncomment the following line if you want to exclude the build folder from git
   # client/build/
   
   # Logs
   logs
   *.log
   npm-debug.log*
   
   # IDE-specific files
   .idea/
   .vscode/
   *.sublime-project
   *.sublime-workspace
   
   # OS-specific files
   .DS_Store
   Thumbs.db
   ```

4. **Commit and Push Your Code**
   ```bash
   git add .
   git commit -m "Initial commit"
   git branch -M main
   git remote add origin https://github.com/your-username/mern-task-app.git
   git push -u origin main
   ```

### 2. Creating a GitHub Actions Workflow

1. **Create a GitHub Actions Workflow File**
   Create a directory structure and workflow file for GitHub Actions:
   ```bash
   mkdir -p .github/workflows
   ```
   
   Then create a file `.github/workflows/azure-deploy.yml` with the following content:
   ```yaml
   name: Deploy to Azure App Service
   
   on:
     push:
       branches:
         - main
       # Optionally configure to run only when specific files change
       # paths:
       #   - 'client/**'
       #   - 'server/**'
       #   - 'server.js'
       #   - 'package.json'
   
     # Allow manual trigger
     workflow_dispatch:
   
   jobs:
     build-and-deploy:
       runs-on: ubuntu-latest
       
       steps:
       - name: Checkout code
         uses: actions/checkout@v3
   
       - name: Set up Node.js
         uses: actions/setup-node@v3
         with:
           node-version: '18.x'
           
       - name: Install dependencies and build client
         run: |
           npm install
           cd client
           npm install
           npm run build
           cd ..
           cd server
           npm install
           cd ..
   
       - name: Deploy to Azure Web App
         uses: azure/webapps-deploy@v2
         with:
           app-name: 'your-app-name'           # Replace with your app name
           publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
           package: .
   ```

2. **Set Up Publish Profile Secret in GitHub**
   - In the Azure Portal, navigate to your App Service
   - Go to Deployment Center → Manage publish profile
   - Click "Download publish profile" to download a .PublishSettings file
   - In GitHub, go to your repository → Settings → Secrets and variables → Actions
   - Click "New repository secret"
   - Name: AZURE_WEBAPP_PUBLISH_PROFILE
   - Value: (copy and paste the entire contents of the downloaded publish profile file)
   - Click "Add secret"

3. **Customize the Workflow (Optional)**
   You may need to adjust the workflow based on your specific project requirements:
   - Update the app-name in the azure/webapps-deploy action to match your Azure App Service name
   - Add environment variables securely using GitHub Secrets
   - Configure caching for Node modules to speed up builds
   - Add additional build or test steps

4. **Trigger the Workflow**
   - Push changes to the main branch OR
   - Go to the Actions tab in your GitHub repository and manually trigger the workflow
   
5. **Monitor Deployment**
   - Go to the Actions tab in your GitHub repository to monitor the progress of your workflow run
   - Check the logs for any errors or issues
   - Once completed, verify the deployment on your Azure App Service URL

### 3. Setting Environment Variables in GitHub Actions

For additional security, consider setting your MongoDB connection string and other sensitive values as GitHub Secrets:

1. **Add Environment Variables as Secrets**
   - Go to your GitHub repository → Settings → Secrets and variables → Actions
   - Click "New repository secret"
   - Add secrets for:
     - MONGODB_URI: Your MongoDB Atlas connection string
     - NODE_ENV: production
     - CLIENT_URL: Your frontend URL if deploying separately

2. **Update the Workflow to Use the Secrets**
   Add an environment setup step in your workflow:
   ```yaml
   - name: Set up environment variables
     uses: azure/appservice-settings@v1
     with:
       app-name: 'your-app-name'
       app-settings-json: |
         [
           {
             "name": "MONGODB_URI",
             "value": "${{ secrets.MONGODB_URI }}",
             "slotSetting": false
           },
           {
             "name": "NODE_ENV",
             "value": "production",
             "slotSetting": false
           }
         ]
     env:
       AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
   ```

---

For additional support, refer to:
- [Azure App Service Documentation](https://docs.microsoft.com/azure/app-service/)
- [MongoDB Atlas Documentation](https://docs.atlas.mongodb.com/)
- [React Deployment Guide](https://create-react-app.dev/docs/deployment/)
